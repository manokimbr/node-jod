// server/utils/vulnerabilityPatterns.js

export const vulnerabilityPatterns = [
  // Dangerous Execution
  { pattern: /eval\(/, message: '⚠️ Uses eval() — unsafe dynamic code execution' },
  { pattern: /Function\(/, message: '⚠️ Uses Function() constructor — similar to eval()' },
  { pattern: /setTimeout\(.+["'].*["'].*\)/, message: '⚠️ setTimeout with string — risky dynamic evaluation' },

  // Child Process / Shell Injection
  { pattern: /child_process\.exec/, message: '⚠️ Uses child_process.exec — command injection risk' },
  { pattern: /child_process\.spawn/, message: '⚠️ Uses child_process.spawn — shell injection risk' },

  // Filesystem Blocking Operations
  { pattern: /fs\.\w+Sync\(/, message: '⚠️ Uses fs.*Sync — blocks event loop (avoid in prod)' },
  { pattern: /fs\.readFileSync/, message: '⚠️ fs.readFileSync used — consider async version' },
  { pattern: /fs\.writeFileSync/, message: '⚠️ fs.writeFileSync used — consider async version' },

  // Filesystem Import (covers multiple formats)
  {
    pattern: /import\s+(\*\s+as\s+)?fs\s+from\s+['"](?:node:)?fs['"]/,
    message: '⚠️ Imports fs module (check for blocking ops)'
  },
  {
    pattern: /require\(['"](?:node:)?fs['"]\)/,
    message: '⚠️ Requires fs module (check for blocking ops)'
  },

  // Obfuscation / Encoding Detection
  {
    pattern: /Buffer\.from\(.*["'].*["'].*\)/,
    message: '⚠️ Buffer.from with string — could be base64 or obfuscated data'
  },

  // Hardcoded Secrets / Credentials
  {
    pattern: /\b(token|secret|password)\b\s*[:=]\s*['"][^'"]+['"]/i,
    message: '⚠️ Possible hardcoded credential — use environment variables'
  },

  // Hardcoded URLs (excluding env-based)
  {
    pattern: /https?:\/\/(?!\$\{process\.env)/,
    message: '⚠️ Hardcoded URL — consider moving to config/env'
  },

  // Dynamic Imports or `new Function`
  {
    pattern: /import\(['"].*['"]\)/,
    message: '⚠️ Dynamic import() — could be abused for obfuscation or injection'
  },

  // Dangerous global access
  {
    pattern: /globalThis\./,
    message: '⚠️ Accessing globalThis — can lead to unpredictable behavior'
  }
]
